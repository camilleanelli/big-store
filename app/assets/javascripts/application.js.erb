// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file. JavaScript code in this file should be added after the last require_* statement.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require tether
//= require bootstrap
//= require_tree .

$(document).ready(function() {
  var applicationID = "<%= ENV['APPLICATION_ID'] %>";
  var apiKey = "<%= ENV['API_KEY'] %>";
  var indexName = 'big-store';
  var client = algoliasearch(applicationID, apiKey);

  var helper = algoliasearchHelper(client, indexName, { facets: ['category'] });
  helper.search();
  helper.on('result', function(content) {
    renderFacetList(content);
    renderHits(content);
    displayPagination(content);
    infoResults(content);
    renderFacetSelect(content);
  });


 // trigger search with the search input
  $('#search-box').on('keyup', function() {
    var currentSearchValue = $(this).val();
    helper.setQuery(currentSearchValue).search();
  });


  //select to render number of results per page the user wants to display
  $('#select-pages').on('change', function() {
    var number = $(this).val();
    helper.setQueryParameter('hitsPerPage', number).search();
  })
  
  //button to clear filter categories 
  $('#reset, #reset-mobile').on('click', function() {
    helper.clearRefinements('category').search();
  })

  // display apps by ranks and most relevant apps
  $("#filter-select").on('change', function() {
    if($(this).val() === "Most relevant") {
      helper.setIndex('big-store').search();
    }else if($(this).val() === "Less populare") {
      helper.setIndex('big-store_rank_desc').search();
    } else if($(this).val() === "Most populare") {
       helper.setIndex('big-store_rank_asc').search();
    }
  });

  function displayPagination(content) {
    var paginationResult = buildPagination(content.page + 1, content.nbPages, 6);
    if(content.nbPages <= 1) {
      return;
    }
    var html = "";
    // not on the first page
    if( content.page !== 0) {
      html += displayPageItem('previous', 'Previous');
    }
    // go to the beginning
    if(!paginationResult.startFromFirstPage) {
      html += displayPageItem('first-page', '<<');
    }
    for(var i = 0; i < paginationResult.pages.length; i++) {
      var pageItem = paginationResult.pages[i];
      var activeClass = pageItem.isCurrent ? "active" : "";
      html += '<li class="page-item '+ activeClass +'"><a class="page-link numbers " href="#">' + pageItem.page + '</a></li>';
    }
    // go to the beginning
    if(!paginationResult.endAtLastPage) {
      html += displayPageItem('last-page', '>>');
    }
    // not on the last page
    if(content.page + 1 !== content.nbPages) {
      html += displayPageItem('next', 'Next');
    }
    $('.pagination').html(html);
    $('.numbers').on('click', function(e) {
      e.preventDefault();
      var link = parseInt($(this).text()) - 1;
      helper.setPage(link).search();
    });
    $('.previous').on('click', function(e) {
      e.preventDefault();
      helper.previousPage().search();
    });
    $('.next').on('click', function(e) {
      e.preventDefault();
      helper.nextPage().search();
    });
    $('.first-page').on('click', function(e) {
      e.preventDefault();
      helper.setPage(0).search();
    });
    $('.last-page').on('click', function(e) {
      e.preventDefault();
      helper.setPage(helper.lastResults.nbPages - 1).search();
    });
  }

  // https://gist.github.com/trantorLiu/5924389
  function buildPagination(currentPage, totalPage, size) {
    var startPage, endPage, context;
    startPage = currentPage - Math.floor(size / 2);
    endPage = currentPage + Math.floor(size / 2);
    if (startPage <= 0) {
      endPage -= (startPage - 1);
      startPage = 1;
    }
    if (endPage > totalPage) {
      endPage = totalPage;
      if (endPage - size + 1 > 0) {
        startPage = endPage - size + 1;
      } else {
        startPage = 1;
      }
    }
    context = {
      startFromFirstPage: false,
      pages: [],
      endAtLastPage: false,
    };
    if (startPage === 1) {
      context.startFromFirstPage = true;
    }
    for (var i = startPage; i <= endPage; i++) {
      context.pages.push({
        page: i,
        isCurrent: i === currentPage,
      });
    }
    if (endPage === totalPage) {
      context.endAtLastPage = true;
    }
    return context;
  }

  function displayPageItem(cssClass, text) {
    return '<li class="page-item"><a class="page-link '+ cssClass +'" href="#">'+ text +'</a></li>';
  }
 
});
